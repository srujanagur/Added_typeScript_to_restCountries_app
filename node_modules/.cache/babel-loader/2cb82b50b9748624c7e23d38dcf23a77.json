{"ast":null,"code":"const initialState = {\n  keyword: \"\",\n  countries: [],\n  searchForKeyword: [],\n  cart: []\n};\nexport default function countryReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRIES\":\n      {\n        return { ...state,\n          countries: action.payload,\n          searchForKeyword: action.payload\n        };\n      }\n\n    case \"SEARCH_KEYWORD\":\n      {\n        const keyword = action.payload;\n        let filteredData = state.countries.filter(country => {\n          return country.name.common.toLowerCase().search(keyword.toLowerCase()) !== -1;\n        });\n        return { ...state,\n          searchForKeyword: filteredData,\n          keyword: keyword\n        };\n      }\n\n    case \"ADD_TO_CART\":\n      {\n        const {\n          country\n        } = action.payload;\n        return { ...state,\n          cart: [...state.cart, country]\n        };\n      }\n\n    case \"DELETE_FROM_CART_LIST\":\n      {\n        const {\n          country\n        } = action.payload;\n        return { ...state,\n          cart: state.cart.filter(function (item) {\n            return item !== country;\n          })\n        };\n      }\n    // case \"SORT_BY_NAME\": {\n    //   return {\n    //     countries: action.payload\n    //       ? [...state.countries].sort((a, b) =>\n    //           a.name.common > b.name.common ? 1 : -1\n    //         )\n    //       : [...state.countries]?.sort((a, b) =>\n    //           a.name.common < b.name.common ? 1 : -1\n    //         ),\n    //   };\n    // }\n    // case \"SORT_BY_POPULATION\":\n    //   return {\n    //     ...state,\n    //     countries: action.payload\n    //       ? [...state.countries].sort((a, b) =>\n    //           a.population > b.population ? 1 : -1\n    //         )\n    //       : [...state.countries]?.sort((a, b) =>\n    //           a.population < b.population ? 1 : -1\n    //         ),\n    //   };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Bruker/OneDrive/Documents/GitHub/Added_typeScript_to_restCountries_app/src/redux/reducers/countryReducer.ts"],"names":["initialState","keyword","countries","searchForKeyword","cart","countryReducer","state","action","type","payload","filteredData","filter","country","name","common","toLowerCase","search","item"],"mappings":"AASA,MAAMA,YAA0B,GAAG;AACjCC,EAAAA,OAAO,EAAE,EADwB;AAEjCC,EAAAA,SAAS,EAAE,EAFsB;AAGjCC,EAAAA,gBAAgB,EAAE,EAHe;AAIjCC,EAAAA,IAAI,EAAE;AAJ2B,CAAnC;AAMA,eAAe,SAASC,cAAT,GAGC;AAAA,MAFdC,KAEc,uEAFNN,YAEM;AAAA,MADdO,MACc;;AACd,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGF,KADE;AAELJ,UAAAA,SAAS,EAAEK,MAAM,CAACE,OAFb;AAGLN,UAAAA,gBAAgB,EAAEI,MAAM,CAACE;AAHpB,SAAP;AAKD;;AACD,SAAK,gBAAL;AAAuB;AACrB,cAAMR,OAAO,GAAGM,MAAM,CAACE,OAAvB;AACA,YAAIC,YAAY,GAAGJ,KAAK,CAACJ,SAAN,CAAgBS,MAAhB,CAAwBC,OAAD,IAAa;AACrD,iBACEA,OAAO,CAACC,IAAR,CAAaC,MAAb,CAAoBC,WAApB,GAAkCC,MAAlC,CAAyCf,OAAO,CAACc,WAAR,EAAzC,MAAoE,CAAC,CADvE;AAGD,SAJkB,CAAnB;AAKA,eAAO,EACL,GAAGT,KADE;AAELH,UAAAA,gBAAgB,EAAEO,YAFb;AAGLT,UAAAA,OAAO,EAAEA;AAHJ,SAAP;AAKD;;AACD,SAAK,aAAL;AAAoB;AAClB,cAAM;AAAEW,UAAAA;AAAF,YAAcL,MAAM,CAACE,OAA3B;AACA,eAAO,EACL,GAAGH,KADE;AAELF,UAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBQ,OAAhB;AAFD,SAAP;AAID;;AAED,SAAK,uBAAL;AAA8B;AAC5B,cAAM;AAAEA,UAAAA;AAAF,YAAcL,MAAM,CAACE,OAA3B;AACA,eAAO,EACL,GAAGH,KADE;AAELF,UAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWO,MAAX,CAAkB,UAAUM,IAAV,EAAgB;AACtC,mBAAOA,IAAI,KAAKL,OAAhB;AACD,WAFK;AAFD,SAAP;AAMD;AACD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACE,aAAON,KAAP;AAjEJ;AAmED","sourcesContent":["import { Country, CountryActions } from \"../../types\";\n\nexport type InitialState = {\n  countries: Country[];\n  cart: Country[];\n  keyword: String;\n  searchForKeyword: Country[];\n};\n\nconst initialState: InitialState = {\n  keyword: \"\",\n  countries: [],\n  searchForKeyword: [],\n  cart: [],\n};\nexport default function countryReducer(\n  state = initialState,\n  action: CountryActions\n): InitialState {\n  switch (action.type) {\n    case \"GET_COUNTRIES\": {\n      return {\n        ...state,\n        countries: action.payload,\n        searchForKeyword: action.payload,\n      };\n    }\n    case \"SEARCH_KEYWORD\": {\n      const keyword = action.payload;\n      let filteredData = state.countries.filter((country) => {\n        return (\n          country.name.common.toLowerCase().search(keyword.toLowerCase()) !== -1\n        );\n      });\n      return {\n        ...state,\n        searchForKeyword: filteredData,\n        keyword: keyword,\n      };\n    }\n    case \"ADD_TO_CART\": {\n      const { country } = action.payload;\n      return {\n        ...state,\n        cart: [...state.cart, country],\n      };\n    }\n\n    case \"DELETE_FROM_CART_LIST\": {\n      const { country } = action.payload;\n      return {\n        ...state,\n        cart: state.cart.filter(function (item) {\n          return item !== country;\n        }),\n      };\n    }\n    // case \"SORT_BY_NAME\": {\n      \n    //   return {\n    //     countries: action.payload\n    //       ? [...state.countries].sort((a, b) =>\n    //           a.name.common > b.name.common ? 1 : -1\n    //         )\n    //       : [...state.countries]?.sort((a, b) =>\n    //           a.name.common < b.name.common ? 1 : -1\n    //         ),\n        \n    //   };\n    // }\n    // case \"SORT_BY_POPULATION\":\n    //   return {\n    //     ...state,\n    //     countries: action.payload\n    //       ? [...state.countries].sort((a, b) =>\n    //           a.population > b.population ? 1 : -1\n    //         )\n    //       : [...state.countries]?.sort((a, b) =>\n    //           a.population < b.population ? 1 : -1\n    //         ),\n      \n    //   };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}